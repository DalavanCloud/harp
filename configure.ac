# autoconf file for HARP
AC_INIT([harp],[0.1])
AC_CONFIG_AUX_DIR([coda])
AM_INIT_AUTOMAKE(foreign subdir-objects 1.10 -Wall)

AC_PREREQ(2.63)

AC_CONFIG_MACRO_DIR([coda/m4])
AC_CONFIG_SUBDIRS([coda])

# set extra version variable
AC_DEFINE_UNQUOTED(HARP_VERSION, ["$VERSION"], [This is the current version of HARP])

# autoheader config include
AC_CONFIG_HEADERS([config.h])

AH_TOP([
#ifndef HARP_CONFIG_H
#define HARP_CONFIG_H
])

AH_BOTTOM([
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#else
# ifdef HAVE_STDINT_H
#  include <stdint.h>
# else
#  ifdef HAVE_SYS_TYPES_H
#   include <sys/types.h>
#  endif
# endif
#endif

#ifndef HAVE_STRDUP
char *strdup(const char *);
#endif

#ifndef HAVE_STRCASECMP
int strcasecmp(const char *, const char *);
#endif

#if !defined(HAVE_STRNCASECMP) || !defined(HAVE_VSNPRINTF)
/* include string.h for size_t definition */
#include <string.h>
#endif

#ifndef HAVE_STRNCASECMP
int strncasecmp(const char *, const char *, size_t);
#endif

#if defined(HAVE_STRCASECMP) || defined(HAVE_STRNCASECMP)
#ifdef HAVE_STRINGS_H
/* include strings.h for definition of strcasecmp and strncasecmp */
#include <strings.h>
#endif
#endif

#ifndef HAVE_VSNPRINTF
/* include stdarg.h for va_list definition */
#include <stdarg.h>
int vsnprintf(const char *, size_t, const char *, va_list ap);
#endif

/* Make sure we use the 1.6 compatibility API for HDF 1.8 */
#define H5_USE_16_API

#endif /* !defined(CODA_CONFIG_H) */
])

# autoheader config include
AC_CONFIG_HEADERS([libharp/harp.h])

# Other files generated by configure
AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([doc/Doxyfile])

# Set dynamic library version

# Rules to update the library version information:
# 1. Start with version information of `0:0:0' for each libtool library.
# 2. Update the version information only immediately before a public release.
# 3. If the library source code has changed at all since the last update,
#    then increment revision (`c:r:a' becomes `c:r+1:a').
# 4. If any interfaces have been added, removed, or changed since the last
#    update, increment current, and set revision to 0.
# 5. If any interfaces have been added since the last public release, then
#    increment age.
# 6. If any interfaces have been removed or changed since the last public
#    release, then set age to 0.
LIBHARP_CURRENT=1
LIBHARP_REVISION=0
LIBHARP_AGE=0
AC_SUBST(LIBHARP_CURRENT)
AC_SUBST(LIBHARP_REVISION)
AC_SUBST(LIBHARP_AGE)

# HARP format version
HARP_FORMAT_VERSION_MAJOR=1
HARP_FORMAT_VERSION_MINOR=0
AC_SUBST(HARP_FORMAT_VERSION_MAJOR)
AC_SUBST(HARP_FORMAT_VERSION_MINOR)
AC_DEFINE_UNQUOTED(HARP_FORMAT_VERSION_MAJOR, [$HARP_FORMAT_VERSION_MAJOR], [Current HARP format major version number.])
AC_DEFINE_UNQUOTED(HARP_FORMAT_VERSION_MINOR, [$HARP_FORMAT_VERSION_MINOR], [Current HARP format minor version number.])
AC_DEFINE_UNQUOTED(HARP_CONVENTION, ["HARP-$HARP_FORMAT_VERSION_MAJOR.$HARP_FORMAT_VERSION_MINOR"], [String to use in netCDF Conventions attribute])

# codadef versions
ST_CODADEF_VERSION([$srcdir/definitions],[ENVISAT_GOMOS])
ST_CODADEF_VERSION([$srcdir/definitions],[ENVISAT_MIPAS])
ST_CODADEF_VERSION([$srcdir/definitions],[ENVISAT_SCIAMACHY])
ST_CODADEF_VERSION([$srcdir/definitions],[EPS])
ST_CODADEF_VERSION([$srcdir/definitions],[ERS_GOME])

# *** checks for programs ***

AC_PROG_CC

# AM_PROG_AR is only available since automake 1.11.2
m4_define_default([AM_PROG_AR])
AM_PROG_AR
AM_PROG_CC_C_O

# configure libtool
LT_INIT
AC_SUBST(LIBTOOL_DEPS)

# lex and yacc
AM_PROG_LEX
AC_PROG_YACC

# install tool
AC_PROG_INSTALL

AC_PROG_AWK

AC_ARG_VAR(DOXYGEN, [The documentation generation program Doxygen])
if test "$DOXYGEN" = "" ; then
  AC_PATH_PROG([DOXYGEN], [doxygen])
fi

AC_ARG_VAR(SPHINXBUILD, [The documentation generation program sphinx-build])
if test "$SPHINXBUILD" = "" ; then
  AC_PATH_PROG([SPHINXBUILD], [sphinx-build])
fi

AC_ARG_VAR(INDENT, [The GNU indent program])
if test "$INDENT" = "" ; then
  AC_PATH_PROG([INDENT], [indent], :)
fi

# *** checks for libraries ****

ST_CHECK_LIB_M

# *** checks for header files ***

AC_HEADER_STDBOOL
AC_CHECK_HEADERS([unistd.h strings.h])

# *** checks for types ***

AC_TYPE_SIZE_T

AC_TYPE_INT8_T
AC_TYPE_UINT8_T
AC_TYPE_INT16_T
AC_TYPE_UINT16_T
AC_TYPE_INT32_T
AC_TYPE_UINT32_T
AC_TYPE_INT64_T
AC_TYPE_UINT64_T

AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(off_t)
AC_CHECK_SIZEOF(size_t)

# sets WORDS_BIGENDIAN
AC_C_BIGENDIAN

# defines _FILE_OFFSET_BITS and _LARGE_FILES if necessary
AC_SYS_LARGEFILE

# *** checks for structures ***

AC_STRUCT_TM

# *** checks for compiler characteristics ***

# check for warning flags
VL_PROG_CC_WARNINGS

# *** checks for library functions ***

AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_CHECK_FUNCS([floor pread stat memmove bcopy strerror])
AC_REPLACE_FUNCS([strdup strcasecmp strncasecmp vsnprintf])


# *** HDF4 ***

ST_CHECK_HDF4
if test $st_cv_have_hdf4 = no ; then
  AC_MSG_ERROR(BOXED_TEXT([ERROR: HDF4 libraries and/or header files are not found.
Try setting the HDF4_LIB and HDF4_INCLUDE environment variables to the
location of your HDF4 library and include files.]))
fi
AC_SUBST(HDF4LIBS)

# *** HDF5 ***

ST_CHECK_HDF5
if test $st_cv_have_hdf5 = no ; then
  AC_MSG_ERROR(BOXED_TEXT([ERROR: HDF5 libraries and/or header files are not found.
Try setting the HDF5_LIB and HDF5_INCLUDE environment variables to the
location of your HDF5 library and include files.]))
fi
AC_SUBST(HDF5LIBS)

# *** extra ***

AC_ARG_ENABLE([printf-warnings],
  [AS_HELP_STRING([--enable-printf-warnings],[enables compiler warnings for the printf-like functions in CODA. This only works if compiling with the GNU compiler. Don't use this option for official installations of CODA (since this will prevent coda.h being used by other compilers).])],
  [ac_cv_enable_printf_warnings=$enableval],
  [AC_CACHE_CHECK([enable printf warnings],ac_cv_enable_printf_warnings,ac_cv_enable_printf_warnings=no)])

if test $ac_cv_enable_printf_warnings = yes && test "$GCC" = yes ; then
  AC_DEFINE(PRINTF_ATTR,
            [__attribute__ ((format(printf, 2, 3)))],
            [Define to the compiler attribute to test for printf format compliance])
fi

# *** udunits2/xml ****

AC_DEFINE([XML_NS], 1, [Define to make XML Namespaces functionality available.])
AC_DEFINE([XML_DTD], 1, [Define to make parameter entity parsing functionality available.])
AC_DEFINE([XML_LARGE_SIZE], 1, [Define to set the size of the XML_Size and XML_Index integer types to be at least 64 bits in size.])
AC_DEFINE([XML_CONTEXT_BYTES], 1024, [Define to specify how much context to retain around the current parse point.])

# *** make sure CODA is configured in sub-package mode ***
ac_configure_args=" --enable-coda-subpackage-mode $ac_configure_args --with-hdf4 --with-hdf5"

AC_OUTPUT
