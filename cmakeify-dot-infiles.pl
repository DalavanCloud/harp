#!/usr/bin/perl
#
# Script for generating CMake *.h.in files for CODA.
#
# Usage: ./cmakeify-dot-infiles <infile> <outfile>
#
# (Typical example: ./cmakeify-dot-infiles config.h.in config.h.cmake.in)
#
# This script:
# + Changes #define lines to #cmakedefine lines
# + Adds windows specific defines
#

use strict;
use warnings;
use File::Basename;

sub CopyFile($$)
{
    local $_;
    my ($Source, $Dest)	= @_;
    my $Model;

    $Model	= substr($Source, -3, 3) eq '.in';

    open SRC, "<", $Source or die "Problem opening ".$Source.":  $!\n";
    open DST, ">", $Dest   or die "Problem creating $Dest: $!\n";
    if ($Model)
    {
        my $generatorfile = basename($0);
        my $sourcefile = basename($Source);
        print DST "/* Generated by $generatorfile from $sourcefile. */\n"
    }
    my $SourceBase	= basename($Source);
  SOURCE_LINE:
    while (<SRC>)
    {
        if ($Model)
        {
            if (($SourceBase eq "config.h.in") &&
                m@#endif /\* !defined\(CODA_CONFIG_H\) \*/@)
            {
                $_ = <<'EOF' . $_;

/* This is the relative path to CODA definitions for the IDL interface. */	
#cmakedefine CODA_DEFINITION_IDL ${CODA_DEFINITION_IDL}

/* This is the relative path to CODA definitions for the MATLAB interface. */	
#cmakedefine CODA_DEFINITION_MATLAB ${CODA_DEFINITION_MATLAB}

#ifdef WIN32
/* include windows specific headers */
#include <windows.h>
#include <io.h>
#include <direct.h>

/* include sys/stat.h because we are going to override stat */
#include <sys/stat.h>

/* we need to redefine ELEMENT_TYPE because it conflicts with io.h contents */
#define ELEMENT_TYPE ELEMENT_TYPE_RENAMED

/* redefines for special string handling functions */
#define strcasecmp _stricmp
#define strncasecmp _strnicmp
#define snprintf _snprintf
#if defined(_MSC_VER) && _MSC_VER < 1500
#define vsnprintf _vsnprintf
#endif

/* redefines for file handling functions */
#define open(arg1,arg2) _open(arg1,arg2)
#define close(arg1) _close(arg1)
#define read(arg1,arg2,arg3) _read(arg1,arg2,arg3)
#define lseek(arg1,arg2,arg3) _lseeki64(arg1,arg2,arg3)
#define off_t __int64
#define stat _stati64
#define S_IFREG _S_IFREG

#define YYMALLOC malloc
#define YYFREE free

#endif

EOF
                next SOURCE_LINE;
            }


            if (m/^(\s*)(#\s*undef)\s+(\w+)/)
            {
                $_	= "$1#cmakedefine $3 ".'$'."{$3}$'";

                # Move comment of end of line to preceding line
                s/^(.*)(\/\*.*\*\/)/$2\n$1$'/;
            }
        }
    }
    continue
    {
        print DST	or die "Problem writing into $Dest: $!\n";
    }
    close SRC;
    close DST
    or die "Problem closing $Dest: $!\n";
}

# main:

$main::infile = undef;
$main::outfile = undef;

args_init(\@ARGV);


# args:
#   1) - ref to @ARGV
# return:
#   undef
# purpose:
#   parse command line.
# effect:
#   modifies @ARGV
sub args_init {

    my( $args ) = @_;

    @$args < 2
    && usage( "Too few args." );

    $main::outfile = pop( @$args );
    $main::infile = pop( @$args );

    (-f $main::infile)
    || usage( "$main::infile: Must be an existing file." );

    CopyFile($main::infile, $main::outfile);
}


sub usage {
    my( $msg ) = @_;
    print "
Usage: $0 <infile> <outfile>
";

    $msg && print "$msg\n\n";
    exit 1;
}
